{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","resp","console","log","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","props","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACE,sBAAMC,SATc,SAACC,GACrBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBqB,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBC,EADgB,iDACgCC,UACpDH,GAFoB,+DAIHI,MAAMF,GAJH,cAIhBG,EAJgB,OAKtBC,QAAQC,IAAIF,GALU,SAQCA,EAAKG,OARN,uBAQdC,EARc,EAQdA,KAGFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,iBAAiBd,QAfhB,kBAmBfQ,GAnBe,4CAAH,sDCERO,EAAc,SAACC,GAC1B,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAKF,EAAMhB,IAAKmB,IAAKH,EAAMJ,QAChC,4BAAII,EAAMJ,YCFHQ,EAAU,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCuB,KAAM,GACNc,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACR3B,EAASC,GAAU2B,MAAK,SAACf,GACvBa,EAAS,CACPhB,KAAMG,EACNW,SAAS,SAGZ,CAACvB,IAEGwB,EDb2BI,CAAa5B,GAAjCe,EADyB,EAC/BN,KAAcc,EADiB,EACjBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,sDAAd,SACGnB,IAEFuB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SACGJ,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aESjBgB,EApBM,SAACX,GAAW,IAAD,EACMhC,mBAAS,CAAC,cADhB,mBACvB4C,EADuB,KACX7C,EADW,KAG9B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG6C,EAAWnB,KAAI,SAACX,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCXxB+B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.a34088ff.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handledInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handledSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handledSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handledInputChange}\r\n      ></input>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifts = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&api_key=XLNbATuEB7f9bSxIFj9a75HcTVetKwuN&limit=10`;\r\n  const resp = await fetch(url);\r\n  console.log(resp);\r\n  //console.log(\"Abajo lo de json\");\r\n\r\n  const { data } = await resp.json();\r\n  //console.log(data);\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = (props) => {\r\n  return (\r\n    <div className=\"animate__animated animate__fadeIn animate__delay-1s\">\r\n      <img src={props.url} alt={props.title} />\r\n      <p>{props.title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn animate__delay-1s\">\r\n        {category}\r\n      </h3>\r\n      {loading && <p>Loading</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifts } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifts(category).then((img) => {\r\n      setstate({\r\n        data: img,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = (props) => {\r\n  const [categories, setCategories] = useState([\"One Piece\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nGifExpertApp.propTypes = {};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}